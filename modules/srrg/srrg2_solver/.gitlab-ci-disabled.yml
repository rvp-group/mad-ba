#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds pipeline stages
stages:
  - build     #ds confirm compilation and linking
  - test      #ds confirm module-wise functionality

#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds script executed before starting each stage
before_script:
  #ds prepare generic environment for SRRG2 builds and tests
  #ds currently retrieved from cmake_modules repository (which is public)
  #ds this script is intended for SRRG2 images only (no apt update/upgrade will be performed)
  - mkdir -p '/root/workspace/src' && cd '/root/workspace/src/'
  - git clone 'https://gitlab.com/srrg-software/srrg_cmake_modules.git'
  - export SRRG_SCRIPT_PATH='/root/workspace/src/srrg_cmake_modules/ci_scripts'
  - ls -al "$SRRG_SCRIPT_PATH"
  - source ${SRRG_SCRIPT_PATH}/install_catkin_workspace.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
  #tg run CI for srrg2_solver_gui/extras
  - export CI_PROJECT_NAME_GUI="${CI_PROJECT_NAME}_gui"
  - export CI_PROJECT_NAME_EXTRAS="${CI_PROJECT_NAME}_extras"
  - export WS="/root/workspace/"
  

#TODO remove fallback branch
#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds build targets (EVEN TESTS!)

build_ubuntu1804_melodic_debug:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: build
  script:
    #ds clones external package and installs artifacts for it - note that currently it is required to do this in reverse order of dependency (updating overwrite)
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/unpack_external_artifacts.sh "srrg2_qgl_viewport" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_EXTRAS" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_GUI" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/append_gtest_library.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS" 
  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz

build_ubuntu1804_melodic_release:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: build
  script:
    #ds clones external package and installs artifacts for it - note that currently it is required to do this in reverse order of dependency (updating overwrite)
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/unpack_external_artifacts.sh "srrg2_qgl_viewport" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_EXTRAS" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_GUI" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/append_gtest_library.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS" 

  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz

build_ubuntu2004_noetic_debug:
  image: srrg-07:5000/srrg-ubuntu-20 #gherobba
  stage: build
  script:
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/unpack_external_artifacts.sh "srrg2_qgl_viewport" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_EXTRAS" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_GUI" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/append_gtest_library.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS" 
  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz

build_ubuntu2004_noetic_release:
  image: srrg-07:5000/srrg-ubuntu-20 #gherobba
  stage: build
  script:
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/unpack_external_artifacts.sh "srrg2_qgl_viewport" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_EXTRAS" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME_GUI" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/append_gtest_library.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS" 
  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz
#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds test targets (NO BUILDING WHATSOEVER!)

test_ubuntu1804_melodic_debug:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: test
  needs:
    - build_ubuntu1804_melodic_debug
  script:
    - cd /root/workspace/
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_debug'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}" "devel"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS"

test_ubuntu1804_melodic_release:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: test
  needs:
    - build_ubuntu1804_melodic_release
  script:
    - cd /root/workspace/
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}" "devel"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS"


test_ubuntu2004_noetic_debug:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: test
  needs:
    - build_ubuntu2004_noetic_debug
  script:
    - cd /root/workspace/
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_debug'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}" "devel"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS"

test_ubuntu2004_noetic_release:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: test
  needs:
    - build_ubuntu2004_noetic_release
  script:
    - cd /root/workspace/
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}" "devel"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME_EXTRAS"
